@model IEnumerable<GestionareRegimuri.Models.Reteta>

@{
    ViewData["Title"] = "Rețete";
}


<h1>Rețete</h1>

<form autocomplete="off" asp-action="Index">
    <div class="autocomplete" style="width:300px;">
        <input id="myInput" name="childname" class="form-control my-0 py-1 red-border" type="text" placeholder="Search" aria-label="Search" />
        <input type="submit" name="Search" />
        @*<div class="input-group-append"
                 <span class="input-group-text" id="basic-text1">
                     <i aria-hidden="true"></i>
                 </span>
            </div>*@
    </div>
</form>



<div class="grid-book-container">
    @if (User.IsInRole("Administrator") || User.IsInRole("Medic"))
    {
        <div class="grid-book-item">
            <p>

                <a asp-controller="Reteta" asp-action="Create">Adaugă Rețetă</a>
            </p>
        </div>
    }
    @foreach (var item in Model)
    {
        @if (User.IsInRole("Administrator") || User.IsInRole("Medic"))
        {
            <a asp-action="Edit" asp-route-id="@item.RetetaID">
                <div class="grid-book-item">
                    <div>
                        <h2>
                            @Html.DisplayFor(modelItem => item.RetetaNume)
                        </h2>
                    </div>
                    <div>
                        <h3>
                            @Html.DisplayFor(modelItem => item.Boli)
                        </h3>
                    </div>
                    <div>
                        @Html.DisplayFor(modelItem => item.Link)
                    </div>
                </div>
            </a>
        }
        else
        {
            <a asp-action="Details" asp-route-id="@item.RetetaID">
                <div class="grid-book-item">
                    <div>
                        <h2>
                            @Html.DisplayFor(modelItem => item.RetetaNume)
                        </h2>
                    </div>
                    <div>
                        <h3>
                            @Html.DisplayFor(modelItem => item.Boli)
                        </h3>
                    </div>

                </div>
            </a>
        }
    }
</div>

@section Scripts{

    <script>
$(function () {
            $("#basic-text1").click(function () {
                $("Form").subbmit();
            })
        });

        function autocomplete(inp, arr) {
            var currentFocus;
            inp.addEventListener("input", function (e) {
                var a, b, i, val = this.value;
                closeAllLists();
                if (!val) { return false; }
                currentFocus = -1;
                a = document.createElement("DIV");
                a.setAttribute("id", this.id + "autocomplete-list");
                a.setAttribute("class", "autocomplete-items");
                this.parentNode.appendChild(a);
                for (i = 0; i < arr.length; i++) {
                    if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
                        b = document.createElement("DIV");
                        b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
                        b.innerHTML += arr[i].substr(val.length);
                        b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
                        b.addEventListener("click", function (e) {
                            inp.value = this.getElementsByTagName("input")[0].value;
                            closeAllLists();
                        });
                        a.appendChild(b);
                    }
                }
            });
            inp.addEventListener("keydown", function (e) {
                var x = document.getElementById(this.id + "autocomplete-list");
                if (x) x = x.getElementsByTagName("div");
                if (e.keyCode == 40) {
                    currentFocus++;
                    addActive(x);
                } else if (e.keyCode == 38) {
                    currentFocus--;
                    addActive(x);
                } else if (e.keyCode == 13) {
                    e.preventDefault();
                    if (currentFocus > -1) {
                        if (x) x[currentFocus].click();
                    }
                }
            });
            function addActive(x) {
                if (!x) return false;
                removeActive(x);
                if (currentFocus >= x.length) currentFocus = 0;
                if (currentFocus < 0) currentFocus = (x.length - 1);
                x[currentFocus].classList.add("autocomplete-active");
            }
            function removeActive(x) {
                for (var i = 0; i < x.length; i++) {
                    x[i].classList.remove("autocomplete-active");
                }
            }
            function closeAllLists(elmnt) {
                var x = document.getElementsByClassName("autocomplete-items");
                for (var i = 0; i < x.length; i++) {
                    if (elmnt != x[i] && elmnt != inp) {
                        x[i].parentNode.removeChild(x[i]);
                    }
                }
            }
            document.addEventListener("click", function (e) {
                closeAllLists(e.target);
            });
        }


        var CautareRetete = [];


        autocomplete(document.getElementById("myInput"), CautareRetete);</script>

}